#include <stdio.h>
#include <time.h>
#include <mpi.h>
#include <stdlib.h>

//Integrantes Kevin Cabrera, Ricardo Maya

//Se reserva memoria para las matrices
float A[100][100];
float b[100];

//Esta sección llena las matrices
void generar(int n) 
	{
	for(int i=0;i<n;i++)
		{
			b[i]=rand()%11+15;
		}

	for(int j=0;j<n;j++)
		{
			for(int i=0;i<n;i++)
				{
					A[j][i]=rand()%11+15;
				}
		}
	}


int main(int argc, char* argv[]){
	int n,rank,size,tag=0;
	
	printf ("\nIngrese n: ");
	scanf("%d",&n);

//Se llenan las matrices
	srand(time(NULL));
	generar(n);	

//inicializa MPI
	MPI_Init(&argc,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);

	float Xn[n];
        float Xn1[n];
	int k;

//if master
  if(rank==0){
	float X[n];
	int i;
	float error;
	error=2;
	while(error>1 && k<=1000){
	//Para k
		MPI_Send(&k, 1, MPI_INT, 1, 1, MPI_COMM_WORLD);
	//Para k+1
		k++;
		MPI_Send(&k, 1, MPI_INT, 1, 2, MPI_COMM_WORLD);
	
	//Se reciven respuestas
		MPI_Recv(&Xn[n], 1, MPI_FLOAT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&Xn1[n], 1, MPI_FLOAT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

	//Se calcula el error
	//Este nunca es cero, así que se fija un margen de tolerancia (1)
    	for(i=0;i<n;i++){
        	error=error+(Xn[i]-Xn1[i])*(Xn[i]-Xn1[i]);
    		}

	}
	
	//Se presenta los resultados
	if(k >=1000){
		printf ("\nLOs resultados no convergen");
	}

	else{
		printf ("\nrespuestas con %i iteraciones: ",k);
		for(i=0;i<n;i++){
			printf ("\nPara x%i = %f",i+1,X[i]);
    		}
	}
  }


  //if woeker1 (k)
  if(rank==1){
	MPI_Recv(&k, 1, MPI_INT, 1, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
	float DB[n];
	float DRX[n];
	int i,j;

 	for(i=0; i<n; i++)
	{
		DB[n]=(1/A[i][i])*(b[i]);
	}


	float tmp=0;
	for(i=0; i<n; i++)
	{
		for(j=0; j<n; j++)
		{
			if(i!=j)
			{
				tmp+= (1/A[i][i])* (A[i][j]);
			}
        	}
		DRX[i]=tmp*k;
		tmp=0;
	}

	for(i=0; i<n; i++)
	{
		Xn[i]=DRX[i]+DB[i];
	}
	MPI_Send(&Xn[n], 1, MPI_FLOAT, 1, 0, MPI_COMM_WORLD);
    }





//if worker2 (k+1)
  if(rank==2){
        MPI_Recv(&k, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
	float DB[n];
	float DRX[n];
	int i,j;
    	for(i=0; i<n; i++)
	{
		DB[n]=(1/A[i][i])*(b[i]);
	}

	float tmp=0;
	for(i=0; i<n; i++)
	{
		for(j=0; j<n; j++)
		{
			if(i!=j)
			{
				tmp+= (1/A[i][i])* (A[i][j]);
			}
        	}
		DRX[i]=tmp*k;
		tmp=0;
	}

	for(i=0; i<n; i++)
	{
		Xn1[i]=DRX[i]+DB[i];
	}
	MPI_Send(&Xn1[n], 1, MPI_FLOAT, 1, 0, MPI_COMM_WORLD);
    }

	MPI_Finalize();

	return 0;
}


